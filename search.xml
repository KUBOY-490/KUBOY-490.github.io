<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设置MYSQL远程连接</title>
      <link href="/2021/11/15/she-zhi-mysql-yuan-cheng-lian-jie/"/>
      <url>/2021/11/15/she-zhi-mysql-yuan-cheng-lian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="设置数据库远程连接"><a href="#设置数据库远程连接" class="headerlink" title="设置数据库远程连接"></a>设置数据库远程连接</h1><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><pre class=" language-mysql"><code class="language-mysql"> CREATE USER 'jim'@'%' IDENTIFIED BY '123456'; #设置远程登录 ALTER USER 'jim'@'%' IDENTIFIED WITH mysql_native_password BY '123456';</code></pre><h2 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h2><h3 id="所有数据库的所有权限"><a href="#所有数据库的所有权限" class="headerlink" title="所有数据库的所有权限"></a>所有数据库的所有权限</h3><pre class=" language-mysql"><code class="language-mysql">grant all privileges on *.* to 'jim'@'%';#刷新FLUSH PRIVILEGES;</code></pre><h3 id="设置-testDB-数据库的所有权限"><a href="#设置-testDB-数据库的所有权限" class="headerlink" title="设置 testDB 数据库的所有权限"></a>设置 testDB 数据库的所有权限</h3><pre class=" language-mysql"><code class="language-mysql">grant all privileges on testDB.* to test@localhost identified by '1234';#刷新系统权限表flush privileges;</code></pre><h3 id="设置-testDB-数据库的部分权限"><a href="#设置-testDB-数据库的部分权限" class="headerlink" title="设置 testDB 数据库的部分权限"></a>设置 testDB 数据库的部分权限</h3><p>****   赋予了 <strong>查询和更新</strong> 的权限</p><pre class=" language-mysql"><code class="language-mysql">grant select,update on testDB.* to test@localhost identified by '1234';#刷新系统权限表flush privileges;</code></pre><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><pre class=" language-mysql"><code class="language-mysql">update mysql.user set password=password('新密码') where User="test" and Host="localhost";#刷新系统权限表flush privileges;</code></pre><h2 id="删除用户及权限"><a href="#删除用户及权限" class="headerlink" title="删除用户及权限"></a>删除用户及权限</h2><pre class=" language-mysql"><code class="language-mysql">#删除远程用户drop user 用户名@'%';#删除本地用户drop user 用户名@ localhost; </code></pre>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> 远程连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的集合</title>
      <link href="/2021/11/10/java-zhong-de-ji-he/"/>
      <url>/2021/11/10/java-zhong-de-ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><ol><li>无法预测存储数据的数量</li><li>同时存储具有一对一关系的数据</li><li>需要进行数据的增删</li><li>数据重复问题</li></ol><h2 id="集合框架的体系结构："><a href="#集合框架的体系结构：" class="headerlink" title="集合框架的体系结构："></a>集合框架的体系结构：</h2><img src="/2021/11/10/java-zhong-de-ji-he/01.png" style="zoom:40%;"><h2 id="一、List"><a href="#一、List" class="headerlink" title="一、List"></a>一、List</h2><ol><li> List是元素有序并且可以重复的集合，称为序列</li><li> List可以精确的控制每个元素的插入位置，或删除某个位置的元素</li><li> List的两个主要实现类是<strong>ArrayList</strong>和<strong>LinkedList</strong></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ol><li>ArrayList底层是由数组实现的</li><li>动态增长，以满足应用程序的需求</li><li>在列表尾部插入或删除数据非常有效</li><li>更适合查找和更新元素</li><li>ArrayList中的元素可以为<strong>null</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListDemo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用ArrayList存储编程语言的名称，并输出</span>        List list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"swift"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出列表中元素的个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中元素的个数为："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//遍历输出所有编程语言</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//移除列表中的C++</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//list.remove(2);</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除C++以后的列表元素为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>需要导入： <strong>java.util.ArrayList</strong> 和 <strong>java.util.List</strong></li><li><img src="/2021/11/10/java-zhong-de-ji-he/02.png" style="zoom:25%;"></li><li>运行结果：<img src="/2021/11/10/java-zhong-de-ji-he/03.png" alt="运行结果"></li><li>add:   添加元素<ul><li>add(元素):</li><li>add(index,object):添加对象到 <strong>index</strong> 位置</li></ul></li><li>get(i) :   获取 <strong>index</strong> 为 <strong>i</strong> 的元素</li><li>remove(index)  /  remove(“元素”)  ：移除元素</li></ul><h3 id="ArrayList-的常用方法"><a href="#ArrayList-的常用方法" class="headerlink" title="ArrayList 的常用方法"></a>ArrayList 的常用方法</h3><table><thead><tr><th><code>boolean</code></th><th><code>add(E e)</code>  将指定的元素追加到此列表的末尾。</th></tr></thead><tbody><tr><td><code>void</code></td><td><code>add(int index, E element)</code>  在此列表中的指定位置插入指定的元素。</td></tr><tr><td><code>boolean</code></td><td><code>addAll(Collection c)</code>  按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾。</td></tr><tr><td><code>boolean</code></td><td><code>addAll(int index,  Collection c)</code>  将指定集合中的所有元素插入到此列表中，从指定的位置开始。</td></tr><tr><td><code>void</code></td><td><code>clear()</code>  从列表中删除所有元素。</td></tr><tr><td><code>Object</code></td><td><code>clone()</code>  返回此 <code>ArrayList</code>实例的浅拷贝。</td></tr><tr><td><code>boolean</code></td><td><code>contains(Object o)</code>  如果此列表包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td><code>void</code></td><td><code>ensureCapacity(int minCapacity)</code>  如果需要，增加此 <code>ArrayList</code>实例的容量，以确保它可以至少保存最小容量参数指定的元素数。</td></tr><tr><td><code>void</code></td><td><code>forEach(Consumer action)</code>  对 <code>Iterable</code>的每个元素执行给定的操作，直到所有元素都被处理或动作引发异常。</td></tr><tr><td><code>E</code></td><td><code>get(int index)</code>  返回此列表中指定位置的元素。</td></tr><tr><td><code>int</code></td><td><code>indexOf(Object o)</code>  返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。</td></tr><tr><td><code>boolean</code></td><td><code>isEmpty()</code>  如果此列表不包含元素，则返回 <code>true</code> 。</td></tr><tr><td><code>Iterator</code></td><td><code>iterator()</code>  以正确的顺序返回该列表中的元素的迭代器。</td></tr><tr><td><code>int</code></td><td><code>lastIndexOf(Object o)</code>  返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。</td></tr><tr><td><code>ListIterator</code></td><td><code>listIterator()</code>  返回列表中的列表迭代器（按适当的顺序）。</td></tr><tr><td><code>ListIterator</code></td><td><code>listIterator(int index)</code>  从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。</td></tr><tr><td><code>E</code></td><td><code>remove(int index)</code>  删除该列表中指定位置的元素。</td></tr><tr><td><code>boolean</code></td><td><code>remove(Object o)</code>  从列表中删除指定元素的第一个出现（如果存在）。</td></tr><tr><td><code>boolean</code></td><td><code>removeAll(Collection c)</code>  从此列表中删除指定集合中包含的所有元素。</td></tr><tr><td><code>boolean</code></td><td><code>removeIf(Predicate filter)</code>  删除满足给定谓词的此集合的所有元素。</td></tr><tr><td><code>protected void</code></td><td><code>removeRange(int fromIndex,  int toIndex)</code>  从这个列表中删除所有索引在 <code>fromIndex</code> （含）和  <code>toIndex</code>之间的元素。</td></tr><tr><td><code>void</code></td><td><code>replaceAll(UnaryOperator operator)</code>  将该列表的每个元素替换为将该运算符应用于该元素的结果。</td></tr><tr><td><code>boolean</code></td><td><code>retainAll(Collection c)</code>  仅保留此列表中包含在指定集合中的元素。</td></tr><tr><td><code>E</code></td><td><code>set(int index, E element)</code>  用指定的元素替换此列表中指定位置的元素。</td></tr><tr><td><code>int</code></td><td><code>size()</code>  返回此列表中的元素数。</td></tr><tr><td><code>void</code></td><td><code>sort(Comparator c)</code>  使用提供的 <code>Comparator</code>对此列表进行排序以比较元素。</td></tr><tr><td><code>Spliterator</code></td><td><code>spliterator()</code>  在此列表中的元素上创建*<a href="Spliterator.html#binding">late-binding</a><em>和</em>故障快速* <a href="../../java/util/Spliterator.html"><code>Spliterator</code></a> 。</td></tr><tr><td><code>List</code></td><td><code>subList(int fromIndex,  int toIndex)</code>  返回此列表中指定的 <code>fromIndex</code> （包括）和  <code>toIndex</code>之间的独占视图。</td></tr><tr><td><code>Object[]</code></td><td><code>toArray()</code>  以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。</td></tr><tr><td><code> T[]</code></td><td><code>toArray(T[] a)</code>  以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）;  返回的数组的运行时类型是指定数组的运行时类型。</td></tr><tr><td><code>void</code></td><td><code>trimToSize()</code>  修改这个 <code>ArrayList</code>实例的容量是列表的当前大小。</td></tr></tbody></table><h2 id="二、Set"><a href="#二、Set" class="headerlink" title="二、Set"></a>二、Set</h2><p>Set是元素无序并且不可以重复的集合，被称为集。</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ol><li>HashSet是Set的一个重要实现类，称为哈希集</li><li>HashSet中的元素无序并且不可以重复</li><li>HashSet中只允许一个null元素</li><li>具有良好的存取和查找性能</li></ol><h3 id="iterator（迭代器）"><a href="#iterator（迭代器）" class="headerlink" title="iterator（迭代器）"></a>iterator（迭代器）</h3><pre class=" language-java"><code class="language-java">Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Iterator   需要  <strong>import java.util.Iterator</strong>;</p><ol><li><strong>Iterator</strong> 接口可以以统一的方式对各种集合元素进行遍历</li><li><strong>hasNext()</strong> 方法检测集合中是否还有下一个元素</li><li>**next() ** 方法返回集合中的下一个元素</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将英文单词添加到HashSet中</span>        Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向集合中添加元素</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 显示集合的内容</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中的元素为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历迭代器并输出元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在集合中插入一个新的单词</span>        <span class="token comment" spellcheck="true">// set.add("green");</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历迭代器并输出元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入重复元素后的输出结果为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//插入重复的数据失败，但是不会报错</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="HashSet-的常用方法"><a href="#HashSet-的常用方法" class="headerlink" title="HashSet 的常用方法"></a>HashSet 的常用方法</h3><table><thead><tr><th><code>boolean</code></th><th><code>add(E e)</code>  将指定的元素添加到此集合（如果尚未存在）。</th></tr></thead><tbody><tr><td><code>void</code></td><td><code>clear()</code>  从此集合中删除所有元素。</td></tr><tr><td><code>Object</code></td><td><code>clone()</code>  返回此 <code>HashSet</code>实例的浅层副本：元素本身不被克隆。</td></tr><tr><td><code>boolean</code></td><td><code>contains(Object o)</code>  如果此集合包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td><code>boolean</code></td><td><code>isEmpty()</code>  如果此集合不包含元素，则返回 <code>true</code> 。</td></tr><tr><td><code>Iterator</code></td><td><code>iterator()</code>  返回此集合中元素的迭代器。</td></tr><tr><td><code>boolean</code></td><td><code>remove(Object o)</code>  如果存在，则从该集合中删除指定的元素。</td></tr><tr><td><code>int</code></td><td><code>size()</code>  返回此集合中的元素数（其基数）。</td></tr><tr><td><code>Spliterator</code></td><td><code>spliterator()</code>  在此集合中的元素上创建 <strong>late-binding</strong> 和<em>故障快速</em>  <strong><code>Spliterator</code></strong> 。</td></tr></tbody></table><h2 id="三、Map"><a href="#三、Map" class="headerlink" title="三、Map"></a>三、Map</h2><ol><li>Map中的数据是以键值对( key-value )的形式存储的</li><li>key-value以Entry类型的对象实例存在</li><li>可以通过key值快速地查找value</li><li>一个映射不能包含重复的键</li><li>每个键最多只能映射到一个值</li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ol><li>基于哈希表的 <strong>Map</strong> 接口的实现</li><li>允许使用 **null **值和 <strong>null</strong> 键</li><li><strong>key</strong> 值不允许重复</li><li><strong>HashMap</strong> 中的 Entry 对象是无序排列的</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictionaryDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> animal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入三组单词对应的注释，并存放到HashMap中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner console<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加数据</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入key值（单词）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String key<span class="token operator">=</span>console<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入value值（注释）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value<span class="token operator">=</span>console<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            animal<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印输出value的值（直接使用迭代器）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用迭代器输出所有的value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it<span class="token operator">=</span>animal<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印输出key和value的值</span>        <span class="token comment" spellcheck="true">//通过entrySet方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过entrySet方法得到key－value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> entrySet<span class="token operator">=</span>animal<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry<span class="token operator">:</span>entrySet<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通过单词找到注释并输出</span>        <span class="token comment" spellcheck="true">//使用keySet方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要查找的单词："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String strSearch<span class="token operator">=</span>console<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.取得keySet</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet<span class="token operator">=</span>animal<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.遍历keySet</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String key<span class="token operator">:</span>keySet<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strSearch<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了！"</span><span class="token operator">+</span><span class="token string">"键值对为："</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>animal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="HashMap-的常用方法"><a href="#HashMap-的常用方法" class="headerlink" title="HashMap 的常用方法"></a>HashMap 的常用方法</h3><table><thead><tr><th><code>void</code></th><th align="left"><code>clear()</code>  从这张地图中删除所有的映射。</th></tr></thead><tbody><tr><td><code>Object</code></td><td align="left"><code>clone()</code>  返回此 <code>HashMap</code>实例的浅拷贝：键和值本身不被克隆。</td></tr><tr><td><code>V</code></td><td align="left"><code>compute(K key,  BiFunction remappingFunction)</code>  尝试计算用于指定键和其当前映射的值的映射（或 <code>null</code>如果没有当前映射）。</td></tr><tr><td><code>V</code></td><td align="left"><code>computeIfAbsent(K key,  Function mappingFunction)</code>  如果指定的键尚未与值相关联（或映射到 <code>null</code>  ），则尝试使用给定的映射函数计算其值，并将其输入到此映射中，除非 <code>null</code> 。</td></tr><tr><td><code>V</code></td><td align="left"><code>computeIfPresent(K key,  BiFunction remappingFunction)</code>  如果指定的密钥的值存在且非空，则尝试计算给定密钥及其当前映射值的新映射。</td></tr><tr><td><code>boolean</code></td><td align="left"><code>containsKey(Object key)</code>  如果此映射包含指定键的映射，则返回 <code>true</code> 。</td></tr><tr><td><code>boolean</code></td><td align="left"><code>containsValue(Object value)</code>  如果此地图将一个或多个键映射到指定值，则返回 <code>true</code> 。</td></tr><tr><td><code>Set&gt;</code></td><td align="left"><code>entrySet()</code>  返回此地图中包含的映射的<a href="../../java/util/Set.html"><code>Set</code></a>视图。</td></tr><tr><td><code>void</code></td><td align="left"><code>forEach(BiConsumer action)</code>  对此映射中的每个条目执行给定的操作，直到所有条目都被处理或操作引发异常。</td></tr><tr><td><code>V</code></td><td align="left"><code>get(Object key)</code>  返回到指定键所映射的值，或 <code>null</code>如果此映射包含该键的映射。</td></tr><tr><td><code>V</code></td><td align="left"><code>getOrDefault(Object key, V defaultValue)</code>  返回到指定键所映射的值，或 <code>defaultValue</code>如果此映射包含该键的映射。</td></tr><tr><td><code>boolean</code></td><td align="left"><code>isEmpty()</code>  如果此地图不包含键值映射，则返回 <code>true</code> 。</td></tr><tr><td><code>Set</code></td><td align="left"><code>keySet()</code>  返回此地图中包含的键的<a href="../../java/util/Set.html"><code>Set</code></a>视图。</td></tr><tr><td><code>V</code></td><td align="left"><code>merge(K key,  V value, BiFunction remappingFunction)</code>  如果指定的键尚未与值相关联或与null相关联，则将其与给定的非空值相关联。</td></tr><tr><td><code>V</code></td><td align="left"><code>put(K key,  V value)</code>  将指定的值与此映射中的指定键相关联。</td></tr><tr><td><code>void</code></td><td align="left"><code>putAll(Map m)</code>  将指定地图的所有映射复制到此地图。</td></tr><tr><td><code>V</code></td><td align="left"><code>putIfAbsent(K key,  V value)</code>  如果指定的键尚未与某个值相关联（或映射到 <code>null</code> ），则将其与给定值相关联并返回  <code>null</code> ，否则返回当前值。</td></tr><tr><td><code>V</code></td><td align="left"><code>remove(Object key)</code>  从该地图中删除指定键的映射（如果存在）。</td></tr><tr><td><code>boolean</code></td><td align="left"><code>remove(Object key, Object value)</code>  仅当指定的密钥当前映射到指定的值时删除该条目。</td></tr><tr><td><code>V</code></td><td align="left"><code>replace(K key,  V value)</code>  只有当目标映射到某个值时，才能替换指定键的条目。</td></tr><tr><td><code>boolean</code></td><td align="left"><code>replace(K key,  V oldValue, V newValue)</code>  仅当当前映射到指定的值时，才能替换指定键的条目。</td></tr><tr><td><code>void</code></td><td align="left"><code>replaceAll(BiFunction function)</code>  将每个条目的值替换为对该条目调用给定函数的结果，直到所有条目都被处理或该函数抛出异常。</td></tr><tr><td><code>int</code></td><td align="left"><code>size()</code>  返回此地图中键值映射的数量。</td></tr><tr><td><code>Collection</code></td><td align="left"><code>values()</code>  返回此地图中包含的值的<code>Collection</code>视图。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的String</title>
      <link href="/2021/11/08/java-zhong-de-string/"/>
      <url>/2021/11/08/java-zhong-de-string/</url>
      
        <content type="html"><![CDATA[<h1 id="String的常用方法"><a href="#String的常用方法" class="headerlink" title="String的常用方法"></a>String的常用方法</h1><p><img src="/2021/11/08/java-zhong-de-string/4.png" alt="String的常用方法"></p><h2 id="一、length"><a href="#一、length" class="headerlink" title="一、length"></a>一、length</h2><ol><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//定义一个字符串"JAVA 编程 基础"</span>         String str<span class="token operator">=</span><span class="token string">"JAVA 编程 基础"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//打印输出字符串的长度</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串的长度是："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//取出字符'程'并输出</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//取出子串"编程 基础"并输出</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//取出子串"编程"并输出</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p><img src="/2021/11/08/java-zhong-de-string/5.png" alt="运行结果"></p></li></ol><h2 id="二、indexof-lastindexof"><a href="#二、indexof-lastindexof" class="headerlink" title="二、indexof,lastindexof"></a>二、indexof,lastindexof</h2><ol><li><p>indexof</p><ol><li>一个参数：查找字符串第一次出现的位置（下标）</li><li>二个参数：<ul><li>查找字符串</li><li>从<strong>输入的下标</strong>开始查找</li></ul></li></ol></li><li><p>lastindexof</p><ul><li>查找字符串最后一次出现的位置（下标）</li></ul></li><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 定义一个字符串"JAVA编程基础，我喜欢java编程"</span>         String str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"JAVA编程基础，我喜欢java编程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//查找字符'A'在字符串中第一次出现的位置</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符'A'在字符串中第一次出现的位置"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//查找子串"编程"在字符串中第一次出现的位置</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子串\"编程\"在字符串中第一次出现的位置"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"编程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//查找字符'A'在字符串中最后一次出现的位置</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符'A'在字符串中最后一次出现的位置"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//查找子串"编程"在字符串中最后一次出现的位置</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子串\"编程\"在字符串中最后一次出现的位置"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"编程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//在字符串index值为8的位置开始，查找子串"编程"第一次出现的位置</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在字符串index值为8的位置开始，查找子串\"编程\"第一次出现的位置"</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"编程"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p><img src="/2021/11/08/java-zhong-de-string/6.png" alt="运行结果"></p></li></ol><h2 id="三、字符串和byte数组之间的相互转换"><a href="#三、字符串和byte数组之间的相互转换" class="headerlink" title="三、字符串和byte数组之间的相互转换"></a>三、字符串和byte数组之间的相互转换</h2><ol><li><p><strong>编码格式必须一致，否则结果出乱码</strong></p></li><li><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 字符串和byte数组之间的相互转换</span>         <span class="token comment" spellcheck="true">//定义一个字符串</span>         String str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"JAVA 编程 基础"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//将字符串转换为byte数组，并打印输出</span>         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrs<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//将byte数组转换为字符串</span>         String str1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p><img src="/2021/11/08/java-zhong-de-string/7.png"></p></li><li><img src="/2021/11/08/java-zhong-de-string/8.png" style="zoom:150%;"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java访问权限</title>
      <link href="/2021/11/07/java-fang-wen-quan-xian/"/>
      <url>/2021/11/07/java-fang-wen-quan-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p><strong>private</strong>:只允许在本类中进行访问</p><p><strong>public</strong>:允许在任意位置访问</p><p><strong>protected</strong>:允许在当前类、同包子类/非子类、跨包子类调用;跨包非子类不允许</p><p><strong>默认</strong>:允许在当前类、同包子类/非子类调用;跨包子类/非子类不允许调用</p><p><img src="/2021/11/07/java-fang-wen-quan-xian/2.png" alt="访问权限"></p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final class:该类没有子类public final class \ final public class</p><p>final方法:该方法不允许被子类重写,但是可以正常被子类继承使用</p><p>final方法内局部变量:只要在具体被使用之前进行赋值即可，一旦赋值不允许被修改<br>        类中成员属性:赋值过程:1、定义直接初始化﹑2、构造方法3、构造代码块</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><img src="/2021/11/07/java-fang-wen-quan-xian/3.png" style="zoom:100%;"><h3 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h3><p><strong>要点:</strong><br>1、某个类只能有一个实例<br>2、必须自行创建实例<br>3、必须自行向整个系统提供这个实例</p><p><strong>实现:</strong><br>1、只提供<strong>私有</strong>的构造方法<br>2、含有一个该类的<strong>静态</strong>私有对象<br>3、提供一个静态的<strong>公有</strong>方法用于创建、获取静态私有对象</p><p><strong>优点:</strong><br>1、在内存中只有一个对象，节省内存空间<br>2、避免频繁的创建销毁对象，提高性能<br>3、避免对共享资源的多重占用</p><p><strong>缺点:</strong><br>1、扩展比较困难<br>2、如果实例化后的对象长期不利用，系统将默认为垃圾进行回收，造成对象状态丢失</p><p><strong>使用场景︰</strong><br>1、创建对象时占用资源过多，但同时又需要用到该类对象<br>2、对系统内资源要求统一读写，如读写配置信息<br>3、当多个实例存在可能引起程序逻辑错误，如号码生成器</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 访问修饰符 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级SQL安装及使用</title>
      <link href="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/"/>
      <url>/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="轻量级SQL安装及使用"><a href="#轻量级SQL安装及使用" class="headerlink" title="轻量级SQL安装及使用"></a>轻量级SQL安装及使用</h1><h2 id="一、下载轻量级SQL"><a href="#一、下载轻量级SQL" class="headerlink" title="一、下载轻量级SQL"></a>一、下载轻量级SQL</h2><ol><li><p>下载</p><ol><li><a href="https://pan.baidu.com/s/1ykoN03ERMc023vgZp3L_qA">百度网盘链接</a></li><li>提取码：grrd </li><li>或者微信扫一扫：<img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/1.png" alt="下载"></li></ol></li><li><p>下载完成后解压、安装</p><ol><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/2.png"></p></li><li><p>双击安装文件</p></li><li><p>可以一直点<strong>下一步</strong></p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/3.png"></p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/4.png"></p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/5.png"></p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/6.png"></p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/7.png"></p></li><li><p>点击完成后，自动运行，如果没有启动服务，点击  <strong>启动服务</strong></p></li><li><p>点击  <strong>查询分析器</strong></p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/8.png"></p></li><li><p>弹出新的窗口  ，注：此时已经是与SQL连接状态</p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/9.png"></p></li><li><h2 id="这个时候可以用SQL语句操作数据库了！"><a href="#这个时候可以用SQL语句操作数据库了！" class="headerlink" title="这个时候可以用SQL语句操作数据库了！"></a>这个时候可以用SQL语句操作数据库了！</h2></li><li><h2 id="调整字体大小、背景颜色等："><a href="#调整字体大小、背景颜色等：" class="headerlink" title="调整字体大小、背景颜色等："></a>调整字体大小、背景颜色等：</h2></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/10.png"></p></li><li><p>或者按快捷键： CTRL+SHIFT+O</p></li><li><p><img src="/2021/10/12/qing-liang-ji-sql-an-zhuang-ji-shi-yong/11.png"></p></li><li><p>设置完，记得点<strong>应用</strong></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt利用Git版本控制</title>
      <link href="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/"/>
      <url>/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建gitee账号"><a href="#一、创建gitee账号" class="headerlink" title="一、创建gitee账号"></a>一、创建gitee账号</h2><h2 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h2><ol><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/1.png" alt="创建仓库"></li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/2.png"></li><li>仓库刚创建完成后，会有http和ssh地址，建议复制到记事本上</li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/3.png" alt="给仓库起名字"></li><li>这个页面暂时<strong>不要关闭</strong>  ，<strong>不要有任何操作</strong>   可以先最小化窗口</li></ol><h2 id="三、创建Qt项目"><a href="#三、创建Qt项目" class="headerlink" title="三、创建Qt项目"></a>三、创建Qt项目</h2><ol><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/4.png" alt="新建项目"></li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/5.png" alt="点击choose"></li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/6.png" alt="下一步"></li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/7.png" alt="下一步"></li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/8.png" alt="下一步"></li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/9.png" alt="版本控制系统：Git"></li><li><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/10.png" alt="填Git安装的路径（目录）"></li><li>点Apply，之后点击OK，下一步。项目创建成功，可以先构建、运行</li></ol><h2 id="四、Qt中写代码并上传到Gitee仓库"><a href="#四、Qt中写代码并上传到Gitee仓库" class="headerlink" title="四、Qt中写代码并上传到Gitee仓库"></a>四、Qt中写代码并上传到Gitee仓库</h2><ol><li>在本地创建仓库</li></ol><ol start="2"><li><pre class=" language-git"><code class="language-git"> git config --global user.name <span class="token string">"Gitee账号"</span>  git config --global user.email <span class="token string">"Gitee绑定的邮箱"</span>  mkdir qt-project  cd qt-project  git init  touch README.md  git add README.md  git commit -m <span class="token string">"first commit"</span>  git remote add origin git@gitee.com:Gitee仓库地址  git push -u origin master </code></pre><p> <img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/12.png" alt="Git bash"></p></li><li><p>整合代码</p></li><li><p><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/11.png" alt="整合代码"></p></li><li><p><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/13.png" alt="如果有改动，则整合"></p></li><li><p>上传代码到Gitee</p></li><li><p><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/14.png" alt="使用Git Gui工具"></p></li><li><p><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/15.png" alt="先commit，再Push"></p></li><li><p><strong>Push</strong> 是上传</p></li><li><p><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/16.png"></p></li><li><p><strong>Source Branches</strong> 是选择代码分支</p></li></ol><pre><code> 1. **Arbitrary Location:**  填写Gitee仓库的SSH地址（git@ 开头） 2. 点**Push**</code></pre><ol start="12"><li><p><img src="/2021/10/11/qt-li-yong-git-ban-ben-kong-zhi/17.png" alt="代码上传成功了！"></p></li><li><p>看到上图，说明上传成功了，可以到Gitee查看刚才创建的仓库(<strong>需要刷新</strong>)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中部署MYSQL</title>
      <link href="/2021/10/10/docker-zhong-bu-shu-mysql/"/>
      <url>/2021/10/10/docker-zhong-bu-shu-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><pre><code>docker pull mysql</code></pre><h2 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h2><pre><code>docker run -p 3306:3306 --name 21mysql -v /project/mysql/conf:/etc/mysql/conf.d -v /project/mysql/logs:/logs -v /project/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1234567 -d mysql// -e 初始化密码// -v 数据卷</code></pre><ul><li>-p  3306:3306   因为MYSQL的默认端口是3306</li></ul><h2 id="三、进入mysql"><a href="#三、进入mysql" class="headerlink" title="三、进入mysql"></a>三、进入mysql</h2><pre><code>docker exec -it 21mysql /bin/bashmysql -uroot -p1234567输入密码</code></pre><h2 id="四、设置数据库远程连接"><a href="#四、设置数据库远程连接" class="headerlink" title="四、设置数据库远程连接"></a>四、设置数据库远程连接</h2><ol><li>新建用户</li></ol><pre class=" language-mysql"><code class="language-mysql"> #创建新的远程用户及密码 CREATE USER 'jim'@'%' IDENTIFIED BY '123456'; #设置远程登录  ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '1234567'; </code></pre><p>​    </p><ol start="2"><li><p>设置权限</p><ol><li><h4 id="所有数据库的所有权限"><a href="#所有数据库的所有权限" class="headerlink" title="所有数据库的所有权限"></a>所有数据库的所有权限</h4><pre class=" language-mysql"><code class="language-mysql">grant all privileges on *.* to 'jim'@'%';#刷新FLUSH PRIVILEGES;</code></pre></li></ol></li><li><p>设置 testDB 数据库的所有权限</p><pre class=" language-mysql"><code class="language-mysql">//@localhost 是本地连接grant all privileges on testDB.* to 'jim'@localhost identified by '1234';//@'%' 远程grant all privileges on mogudb.* to 'jim'@'%';flush privileges;//刷新系统权限表</code></pre></li><li><p>设置 testDB 数据库的部分权限</p><p> ****   赋予了 <strong>查询和更新</strong> 的权限</p><pre class=" language-mysql"><code class="language-mysql">grant select,update on testDB.* to test@localhost identified by '1234';flush privileges; //刷新系统权限表</code></pre></li><li><p>修改密码</p><pre class=" language-mysql"><code class="language-mysql">update mysql.user set password=password('新密码') where User="test" and Host="localhost";flush privileges;</code></pre></li><li><p>删除用户及权限</p><pre class=" language-mysql"><code class="language-mysql">#删除远程用户drop user 用户名@'%';#例如:drop 'jim'@'%';#删除本地用户drop user 用户名@localhost; </code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中部署Tomcat</title>
      <link href="/2021/10/10/docker-zhong-bu-shu-tomcat/"/>
      <url>/2021/10/10/docker-zhong-bu-shu-tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat相关操作"><a href="#tomcat相关操作" class="headerlink" title="tomcat相关操作"></a>tomcat相关操作</h1><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><pre><code>docker pull tomcat//指定版本号：docker pull tomcat:9.0</code></pre><h2 id="二、启动Tomcat"><a href="#二、启动Tomcat" class="headerlink" title="二、启动Tomcat"></a>二、启动Tomcat</h2><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><pre><code>docekr run -p 8080:8080  -it --name xxxtomcat tomcat </code></pre><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><pre><code>docker run -p 8080:8080 -it tomcat /bin/bashcd /bin./startup.sh</code></pre><h3 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h3><pre><code>docker create --name xxxtomcat -p 80:8080 -v /project/demo1://usr/local/tomcat/webapps tomcat</code></pre><ul><li>-p 80:8080  80是外部访问的端口，8080是Tomcat监事的端口，80:8080 把Tomcat的8080端口映射到服务器的80端口</li><li>-v 是添加数据卷, <strong>:</strong> 前面的的是服务器的/本地的路径(目录/文件夹)</li><li><strong>–name</strong> 后面的是自定义的名字方便区别</li></ul><h2 id="三、进入Tomcat里"><a href="#三、进入Tomcat里" class="headerlink" title="三、进入Tomcat里"></a>三、进入Tomcat里</h2><pre><code>docker exec -it xxxtomcat /bin/bash//把/project/demo1里的文件 复制到 容器里docker cp /project/demo1 xxxtomcat://usr/local/tomcat/webapps</code></pre><h2 id="默认访问的文件"><a href="#默认访问的文件" class="headerlink" title="默认访问的文件"></a>默认访问的文件</h2><p><strong>Tomcat默认打开/usr/local/tomcat/webapps/ROOT/index.html</strong></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Docker</title>
      <link href="/2021/10/10/linux-an-zhuang-docker/"/>
      <url>/2021/10/10/linux-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装DOCKER"><a href="#安装DOCKER" class="headerlink" title="安装DOCKER"></a>安装DOCKER</h1><ol><li>先安装一些系统工具</li><li>添加软件源信息：</li><li>更新并且安装Docker-ce</li><li>启动Docker</li></ol><pre><code>yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum -y install docker-ceservice docker start</code></pre><pre><code>镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https://7n7zsvyk.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h1 id="启动docker后台"><a href="#启动docker后台" class="headerlink" title="启动docker后台"></a>启动docker后台</h1><ol><li>docker run  hello-world</li><li>docker images<ol><li>REPOSITORY</li><li>TAG   版本号</li><li>IMAGE ID   镜像ID（同一个镜像的<strong>ID相同</strong>且<strong>唯一的</strong>）</li><li>CREATED    镜像创建时间</li><li>SIZE     镜像大小</li></ol></li></ol><h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1.获取镜像"></a>1.获取镜像</h2><ol><li><pre><code> docker pull centos</code></pre><ol><li>这样会下载最新的CentOS版本</li></ol></li><li><pre><code> docker pull cenos:7</code></pre><ol><li>指定下载的版本号</li></ol></li></ol><h2 id="2-查看本地镜像"><a href="#2-查看本地镜像" class="headerlink" title="2.查看本地镜像"></a>2.查看本地镜像</h2><ol><li><p>查看所有的本地镜像</p><ol><li><pre><code> docker images docker images -a</code></pre></li><li><p><strong>-a    含中间映像层</strong></p></li><li><p>只查看镜像的ID</p><ol><li><pre><code> docker images -aq</code></pre></li></ol></li></ol></li><li><p>查看单个镜像的信息</p><ol><li><pre><code> docker images tomcat docker images centos</code></pre></li></ol></li><li><p>查看完整的信息</p><ol><li><pre><code> docker images --digests</code></pre></li><li><pre><code> docker images --digests --no-trunc</code></pre></li><li><p>–no-trunc   显示完整的ID信息</p></li></ol></li></ol><h2 id="3-搜索某个镜像"><a href="#3-搜索某个镜像" class="headerlink" title="3.搜索某个镜像"></a>3.搜索某个镜像</h2><ol><li><pre><code> docker search centos docker search -s 10 centos docker search --automated centos</code></pre></li></ol><h2 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h2><ol><li><ol><li><pre><code> docker rmi -f (IMAGE ID) docker rmi -f 镜像名1 镜像名2 ... /* 删除多个镜像 */</code></pre></li><li><pre><code> docker rmi -f $(docker images -aq)</code></pre></li></ol></li><li><p>强制删除镜像，而不进行提示确认 <strong>( -f,force )</strong></p><ol><li><pre><code> docker images prune -f</code></pre></li><li><p><strong>docker images prune</strong></p><ol><li><strong>-a .-all:</strong>    删除所有无用镜像，不光是临时镜像</li><li><strong>-filter,  filter:</strong>      只清理符合给定过滤器的镜像</li><li><strong>-f,dorce:</strong>      强制删除镜像，而不进行提示确认</li></ol></li></ol></li></ol><h2 id="5-创建镜像"><a href="#5-创建镜像" class="headerlink" title="5.创建镜像"></a>5.创建镜像</h2><p>略</p><h1 id="操作docker容器"><a href="#操作docker容器" class="headerlink" title="操作docker容器"></a>操作docker容器</h1><p>镜像是静态的只读文件，而容器带有运行时需要的可写文件层，同时，容器中的<strong>应用进程</strong>处于<strong>运行状态</strong></p><ol><li><p>进入Ubuntu镜像：</p><ol><li><pre><code> docker run -it ubuntu /bin/sh</code></pre></li><li><p>退出ubuntu：</p></li><li><pre><code> exit</code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/10/hello-world/"/>
      <url>/2021/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
